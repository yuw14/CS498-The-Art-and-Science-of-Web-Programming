{"ast":null,"code":"/*\n ** © 2020 by Philipp Dunkel, Ben Noordhuis, Elan Shankar, Paul Miller\n ** Licensed under MIT License.\n */\n\n/* jshint node:true */\n'use strict';\n\nif (process.platform !== 'darwin') {\n  throw new Error(`Module 'fsevents' is not compatible with platform '${process.platform}'`);\n}\n\nconst Native = require('./fsevents.node');\n\nconst events = Native.constants;\n\nfunction watch(path, handler) {\n  if (typeof path !== 'string') {\n    throw new TypeError(`fsevents argument 1 must be a string and not a ${typeof path}`);\n  }\n\n  if (typeof handler !== 'function') {\n    throw new TypeError(`fsevents argument 2 must be a function and not a ${typeof handler}`);\n  }\n\n  let instance = Native.start(path, handler);\n  if (!instance) throw new Error(`could not watch: ${path}`);\n  return () => {\n    const result = instance ? Promise.resolve(instance).then(Native.stop) : Promise.resolve(undefined);\n    instance = undefined;\n    return result;\n  };\n}\n\nfunction getInfo(path, flags) {\n  return {\n    path,\n    flags,\n    event: getEventType(flags),\n    type: getFileType(flags),\n    changes: getFileChanges(flags)\n  };\n}\n\nfunction getFileType(flags) {\n  if (events.ItemIsFile & flags) return 'file';\n  if (events.ItemIsDir & flags) return 'directory';\n  if (events.ItemIsSymlink & flags) return 'symlink';\n}\n\nfunction anyIsTrue(obj) {\n  for (let key in obj) {\n    if (obj[key]) return true;\n  }\n\n  return false;\n}\n\nfunction getEventType(flags) {\n  if (events.ItemRemoved & flags) return 'deleted';\n  if (events.ItemRenamed & flags) return 'moved';\n  if (events.ItemCreated & flags) return 'created';\n  if (events.ItemModified & flags) return 'modified';\n  if (events.RootChanged & flags) return 'root-changed';\n  if (events.ItemCloned & flags) return 'cloned';\n  if (anyIsTrue(flags)) return 'modified';\n  return 'unknown';\n}\n\nfunction getFileChanges(flags) {\n  return {\n    inode: !!(events.ItemInodeMetaMod & flags),\n    finder: !!(events.ItemFinderInfoMod & flags),\n    access: !!(events.ItemChangeOwner & flags),\n    xattrs: !!(events.ItemXattrMod & flags)\n  };\n}\n\nexports.watch = watch;\nexports.getInfo = getInfo;\nexports.constants = events;","map":{"version":3,"sources":["/Users/wangyu/Documents/MERN_Project/yuw14_devconnector/node_modules/fsevents/fsevents.js"],"names":["process","platform","Error","Native","require","events","constants","watch","path","handler","TypeError","instance","start","result","Promise","resolve","then","stop","undefined","getInfo","flags","event","getEventType","type","getFileType","changes","getFileChanges","ItemIsFile","ItemIsDir","ItemIsSymlink","anyIsTrue","obj","key","ItemRemoved","ItemRenamed","ItemCreated","ItemModified","RootChanged","ItemCloned","inode","ItemInodeMetaMod","finder","ItemFinderInfoMod","access","ItemChangeOwner","xattrs","ItemXattrMod","exports"],"mappings":"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","sourcesContent":["/*\n ** © 2020 by Philipp Dunkel, Ben Noordhuis, Elan Shankar, Paul Miller\n ** Licensed under MIT License.\n */\n\n/* jshint node:true */\n'use strict';\n\nif (process.platform !== 'darwin') {\n  throw new Error(`Module 'fsevents' is not compatible with platform '${process.platform}'`);\n}\n\nconst Native = require('./fsevents.node');\nconst events = Native.constants;\n\nfunction watch(path, handler) {\n  if (typeof path !== 'string') {\n    throw new TypeError(`fsevents argument 1 must be a string and not a ${typeof path}`);\n  }\n  if (typeof handler !== 'function') {\n    throw new TypeError(`fsevents argument 2 must be a function and not a ${typeof handler}`);\n  }\n\n  let instance = Native.start(path, handler);\n  if (!instance) throw new Error(`could not watch: ${path}`);\n  return () => {\n    const result = instance\n      ? Promise.resolve(instance).then(Native.stop)\n      : Promise.resolve(undefined);\n    instance = undefined;\n    return result;\n  };\n}\n\nfunction getInfo(path, flags) {\n  return {\n    path,\n    flags,\n    event: getEventType(flags),\n    type: getFileType(flags),\n    changes: getFileChanges(flags)\n  };\n}\n\nfunction getFileType(flags) {\n  if (events.ItemIsFile & flags) return 'file';\n  if (events.ItemIsDir & flags) return 'directory';\n  if (events.ItemIsSymlink & flags) return 'symlink';\n}\nfunction anyIsTrue(obj) {\n  for (let key in obj) {\n    if (obj[key]) return true;\n  }\n  return false;\n}\nfunction getEventType(flags) {\n  if (events.ItemRemoved & flags) return 'deleted';\n  if (events.ItemRenamed & flags) return 'moved';\n  if (events.ItemCreated & flags) return 'created';\n  if (events.ItemModified & flags) return 'modified';\n  if (events.RootChanged & flags) return 'root-changed';\n  if (events.ItemCloned & flags) return 'cloned';\n  if (anyIsTrue(flags)) return 'modified';\n  return 'unknown';\n}\nfunction getFileChanges(flags) {\n  return {\n    inode: !!(events.ItemInodeMetaMod & flags),\n    finder: !!(events.ItemFinderInfoMod & flags),\n    access: !!(events.ItemChangeOwner & flags),\n    xattrs: !!(events.ItemXattrMod & flags)\n  };\n}\n\nexports.watch = watch;\nexports.getInfo = getInfo;\nexports.constants = events;\n"]},"metadata":{},"sourceType":"script"}